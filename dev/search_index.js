var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Modules = [PlasmaFormulary]","category":"page"},{"location":"api/#PlasmaFormulary.Alfven_speed","page":"API Reference","title":"PlasmaFormulary.Alfven_speed","text":"Alfven_speed(B::BField, œÅ::Density)\nAlfven_speed(B::BField, n::NumberDensity; mass_numb = 1, z = 1)\n\nThe typical propagation speed of magnetic disturbances in a quasineutral plasma.\n\nReferences: Wikipedia, PlasmaPy API\n\n\n\n\n\n","category":"function"},{"location":"api/#PlasmaFormulary.Alfven_velocity","page":"API Reference","title":"PlasmaFormulary.Alfven_velocity","text":"Alfven_velocity(B::BFields, œÅ::Density)\nAlfven_velocity(B::BFields, n::NumberDensity; mass_numb = 1, z = 1)\n\nCalculate the Alfv√©n velocity (v_A = B/‚àö(Œº‚ÇÄœÅ)) in a magnetized plasma.\n\nArguments\n\nB: Magnetic field strength (scalar or vector)\nœÅ: Mass density\nn: Number density\nmass_numb=1: Mass number of the ion species\nz=1: Ion charge number\n\nExamples\n\n# Using mass density\nB = 1.0u\"T\"\nœÅ = 1.0u\"kg/m^3\"\nva = Alfven_velocity(B, œÅ)\n\n# Using number density\nn = 1.0e19u\"m^-3\"\nva = Alfven_velocity(B, n, mass_numb=1, z=1)\n\n# Vector input\nB = [1.0, 2.0, 3.0]u\"T\"\nva = Alfven_velocity(B, n)\n\nSee also: Alfven_speed\n\n\n\n\n\n","category":"function"},{"location":"api/#PlasmaFormulary.gyrofrequency","page":"API Reference","title":"PlasmaFormulary.gyrofrequency","text":"gyrofrequency(B::BField, p::ParticleLike; kw...)\n\nCalculate the gyrofrequency (or cyclotron frequency) of a charged particle's circular motion in a magnetic field. The gyrofrequency is the frequency of a charged particle's gyromotion around magnetic field lines.\n\nInternal function:\n\n_gyrofrequency(B::BField, mass::Mass, q::Charge)\n\nReferences: PlasmaPy API Documentation\n\nExamples\n\njulia> gyrofrequency(0.01u\"T\", :p)  # proton gyrofrequency\n957883.3292211705 s‚Åª¬π\n\njulia> gyrofrequency(0.1u\"T\", :e)  # electron gyrofrequency\n1.7588200107721634e10 s‚Åª¬π\n\njulia> gyrofrequency(250u\"Gauss\", \"Fe\"; z=13)  # Fe2+ ion gyrofrequency\n560682.3520611608 s‚Åª¬π\n\n\n\n\n\n","category":"function"},{"location":"api/#PlasmaFormulary.gyroradius","page":"API Reference","title":"PlasmaFormulary.gyroradius","text":"gyroradius(B::BField, p::ParticleLike, Vperp::Velocity; kw...)\ngyroradius(B::BField, p::ParticleLike, T::EnergyOrTemp; kw...)\n\nCalculate the radius of circular motion for a charged particle in a uniform magnetic field.\n\nInternal function:\n\n_gyroradius(B::BField, mass::Mass, q::Charge, Vperp::Velocity)\n\nReferences: PlasmaPy API Documentation\n\nExamples\n\njulia> gyroradius(0.2u\"T\", :p, 1e6u\"K\")  # proton at 1 million K\n0.006706796656500042 m\n\njulia> gyroradius(0.2u\"T\", :e, 1e6u\"K\")  # electron at 1 million K\n0.00015651672339994665 m\n\njulia> gyroradius(0.2u\"T\", \"Fe2+\", 1e6u\"K\")\n0.024988956222685512 m\n\n\n\n\n\n","category":"function"},{"location":"api/#PlasmaFormulary.inertial_length","page":"API Reference","title":"PlasmaFormulary.inertial_length","text":"inertial_length(n::NumberDensity, p::ParticleLike; kw...)\n\nCalculate a charged particle's inertial length. \n\nThe inertial length is the characteristic length scale for a particle to be accelerated in a plasma. The Hall effect becomes important on length scales shorter than the ion inertial length.\n\nReferences: PlasmaPy API Documentation\n\n\n\n\n\n","category":"function"},{"location":"api/#PlasmaFormulary.magnetic_pressure-Tuple{Union{Unitful.Quantity{T, ùêå ùêà^-1 ùêì^-2, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêå ùêà^-1 ùêì^-2, U}} where {L, S}} where {T, U}}","page":"API Reference","title":"PlasmaFormulary.magnetic_pressure","text":"magnetic_pressure(B)\n\nCalculate the magnetic pressure.\n\n\n\n\n\n","category":"method"},{"location":"api/#PlasmaFormulary.plasma_beta-Tuple{Union{Unitful.Level{L, S, Unitful.Quantity{T, ùöØ, U}} where {T, U, L, S}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã^2 ùêå ùêì^-2, U}} where {T, U, L, S}, Unitful.Quantity{T, ùöØ} where T, Unitful.Quantity{T, ùêã^2 ùêå ùêì^-2} where T}, Union{Unitful.Quantity{T, ùêã^-3, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã^-3, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, ùêå ùêà^-1 ùêì^-2, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêå ùêà^-1 ùêì^-2, U}} where {L, S}} where {T, U}}","page":"API Reference","title":"PlasmaFormulary.plasma_beta","text":"plasma_beta(T, n, B)\n\nCompute the plamsa beta (Œ≤), the ratio of thermal pressure to magnetic pressure.\n\nArguments\n\nT: The temperature of the plasma.\nn: The particle density of the plasma.\nB: The magnetic field in the plasma.\n\n\n\n\n\n","category":"method"},{"location":"api/#PlasmaFormulary.plasma_frequency","page":"API Reference","title":"PlasmaFormulary.plasma_frequency","text":"plasma_frequency(n::NumberDensity, p::ParticleLike; kw...)\n\nCalculate the plasma frequency of a species.\n\nThe plasma frequency is a characteristic frequency of the plasma.  More often, it refers to the frequency at which electrons oscillate in the plasma.\n\nInternal function:\n\n_plasma_frequency(n::NumberDensity, q::Charge, mass::Mass)\n\nReferences: PlasmaPy API Documentation\n\nExamples\n\njulia> plasma_frequency(1e19u\"m^-3\")  # plasma frequency\n1.7839863654934653e11 s‚Åª¬π\n\njulia> plasma_frequency(1e19u\"m^-3\", :p)  # proton plasma frequency\n4.163294562488352e9 s‚Åª¬π\n\n\n\n\n\n","category":"function"},{"location":"api/#PlasmaFormulary.thermal_pressure-Tuple{Union{Unitful.Level{L, S, Unitful.Quantity{T, ùöØ, U}} where {T, U, L, S}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã^2 ùêå ùêì^-2, U}} where {T, U, L, S}, Unitful.Quantity{T, ùöØ} where T, Unitful.Quantity{T, ùêã^2 ùêå ùêì^-2} where T}, Union{Unitful.Quantity{T, ùêã^-3, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã^-3, U}} where {L, S}} where {T, U}}","page":"API Reference","title":"PlasmaFormulary.thermal_pressure","text":"thermal_pressure(T, n)\n\nCalculate the thermal pressure for a Maxwellian distribution.\n\nArguments\n\nT: The particle temperature or energy.\nn: The particle number density.\n\n\n\n\n\n","category":"method"},{"location":"api/#PlasmaFormulary.thermal_speed_coefficients-Tuple{String, Int64}","page":"API Reference","title":"PlasmaFormulary.thermal_speed_coefficients","text":"thermal_speed_coefficients(method::String, ndim::Int)\n\nGet the thermal speed coefficient corresponding to the desired thermal speed definition.\n\nArguments\n\nmethod::String: Method to be used for calculating the thermal speed. Valid values are \"most_probable\", \"rms\", \"mean_magnitude\", and \"nrl\".\nndim::Int: Dimensionality (1D, 2D, 3D) of space in which to calculate thermal speed. Valid values are 1, 2, or 3.\n\n\n\n\n\n","category":"method"},{"location":"api/#PlasmaFormulary.@permutable_args-Tuple{Any}","page":"API Reference","title":"PlasmaFormulary.@permutable_args","text":"@permutable_args function_name((arg1, Type1), (arg2, Type2), ...)\n\nGenerate multiple method definitions allowing arbitrary argument order based on types. Supports both multi-line function definitions and one-line function definitions.\n\nExamples\n\n@permutable_args function test(x::Int, y::String)\n    return x, y\nend\n\n@permutable_args test(x::Int, y::String) = x + length(y)\n\n\n\n\n\n","category":"macro"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = PlasmaFormulary","category":"page"},{"location":"#PlasmaFormulary","page":"Home","title":"PlasmaFormulary","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia package for plasma physics formulas. This package implements a subset of the formulas found in the NRL Plasma Formulary.","category":"page"},{"location":"","page":"Home","title":"Home","text":"We use Julia's dynamic dispatch to handle arguments. As a result, arguments can be given in any order for most functions, since the unit (type) of each argument is often unique. See @permutable_args for implementations of permutable arguments.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For functions that take a ParticleLike as an argument, we use ChargedParticles.jl to handle particle properties. One could provide a symbolic particle name or string or a Particle object for the argument. Also, mass number and charge number can be specified as keyword arguments for these functions.","category":"page"},{"location":"#Quick-Example","page":"Home","title":"Quick Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using PlasmaFormulary, Unitful\n\ngyrofrequency(0.1u\"T\", :e)  # electron gyrofrequency\n\nplasma_frequency(1e19u\"m^-3\")  # electron plasma frequency\n\ngyroradius(0.1u\"T\", :p, 1e6u\"K\")  # proton gyroradius at 1 million K","category":"page"},{"location":"","page":"Home","title":"Home","text":"One does not need to care the order of the arguments, we automatically handle them for you. ü•≥","category":"page"},{"location":"","page":"Home","title":"Home","text":"Common particle names are also supported. ü´°","category":"page"},{"location":"","page":"Home","title":"Home","text":"gyroradius(0.1u\"T\", :e, 1e6u\"K\") == \n    gyroradius(1e6u\"K\", \"electron\", 0.1u\"T\") == \n    gyroradius(\"e+\", 1e6u\"K\", 0.1u\"T\")","category":"page"},{"location":"#Related-packages","page":"Home","title":"Related packages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PlasmaPy : plasmapy.formulary subpackage provides theoretical formulas for calculation of physical quantities helpful for plasma physics.","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
