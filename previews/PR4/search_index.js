var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/#Dimensionless-numbers","page":"API Reference","title":"Dimensionless numbers","text":"","category":"section"},{"location":"api/#PlasmaFormularyZ.plasma_beta","page":"API Reference","title":"PlasmaFormularyZ.plasma_beta","text":"plasma_beta(T, n, B)\n\nCompute the plamsa beta (β), the ratio of thermal pressure to magnetic pressure.\n\nArguments\n\nT: The temperature of the plasma.\nn: The particle density of the plasma.\nB: The magnetic field in the plasma.\n\nExample\n\njulia> plasma_beta(1e6u\"K\", 1e19u\"m^-3\", 0.2u\"T\")\n0.008674873511172188\n\nReferences\n\nPlasmaPy Documentation\nWikipedia\n\n\n\n\n\n","category":"function"},{"location":"api/#Frequencies","page":"API Reference","title":"Frequencies","text":"","category":"section"},{"location":"api/#PlasmaFormularyZ.plasma_frequency","page":"API Reference","title":"PlasmaFormularyZ.plasma_frequency","text":"plasma_frequency(n::NumberDensity, [q::Charge, mass::Mass])\nplasma_frequency(n::NumberDensity, p::ParticleLike; kw...)\n\nCalculate the plasma frequency of a species.\n\nThe plasma frequency is a characteristic frequency of the plasma.  More often, it refers to the frequency at which electrons oscillate in the plasma.\n\nExamples\n\njulia> plasma_frequency(1e19u\"m^-3\")  # plasma frequency\n1.7839863654934653e11 rad s⁻¹\n\njulia> plasma_frequency(1e19u\"m^-3\", :p)  # proton plasma frequency\n4.1632945624883513e9 rad s⁻¹\n\nReferences\n\nWikipedia\nPlasmaPy Documentation\n\n\n\n\n\n","category":"function"},{"location":"api/#PlasmaFormularyZ.gyrofrequency","page":"API Reference","title":"PlasmaFormularyZ.gyrofrequency","text":"gyrofrequency(B::BField, p::ParticleLike; kw...)\ngyrofrequency(B::BField, mass::Mass, q::Charge)\n\nCalculate the gyrofrequency (or cyclotron frequency) of a charged particle's circular motion in a magnetic field. The gyrofrequency is the angular frequency of a charged particle's gyromotion around magnetic field lines.\n\nReferences: \n\nPlasmaPy Documentation\n\nExamples\n\njulia> gyrofrequency(0.01u\"T\", :p)  # proton gyrofrequency\n957883.3292211705 rad s⁻¹\n\njulia> uconvert(u\"Hz\", gyrofrequency(0.1u\"T\", :e), Periodic())  # electron gyrofrequency as frequency\n2.799248987233304e9 Hz\n\njulia> gyrofrequency(250u\"Gauss\", \"Fe\"; z=13)  # Fe2+ ion gyrofrequency\n560682.3520611608 rad s⁻¹\n\n\n\n\n\n","category":"function"},{"location":"api/#Otherwise-undocumented-functions","page":"API Reference","title":"Otherwise undocumented functions","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"This section will be removed once the documentation is complete.","category":"page"},{"location":"api/#PlasmaFormularyZ.gyroradius-Tuple{Union{Unitful.Quantity{T, 𝐌 𝐈^-1 𝐓^-2, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌 𝐈^-1 𝐓^-2, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, 𝐌, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, 𝐈 𝐓, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐈 𝐓, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, 𝐋 𝐓^-1, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋 𝐓^-1, U}} where {L, S}} where {T, U}}","page":"API Reference","title":"PlasmaFormularyZ.gyroradius","text":"Calculate the radius of circular motion for a charged particle in a uniform magnetic field\n\nReferences: PlasmaPy API Documentation\n\nExamples\n\njulia> gyroradius(0.2u\"T\", Unitful.me, Unitful.q, 1e6u\"K\")\n0.00015651672339994665 m\n\n\n\n\n\n","category":"method"},{"location":"api/#PlasmaFormularyZ.inertial_length-Tuple{Union{Unitful.Quantity{T, 𝐋^-3, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋^-3, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, 𝐈 𝐓, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐈 𝐓, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, 𝐌, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌, U}} where {L, S}} where {T, U}}","page":"API Reference","title":"PlasmaFormularyZ.inertial_length","text":"The inertial length is the characteristic length scale for a particle to be accelerated in a plasma. The Hall effect becomes important on length scales shorter than the ion inertial length.\n\nReferences: PlasmaPy API Documentation\n\n\n\n\n\n","category":"method"},{"location":"api/#PlasmaFormularyZ.magnetic_pressure-Tuple{Union{Unitful.Quantity{T, 𝐌 𝐈^-1 𝐓^-2, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌 𝐈^-1 𝐓^-2, U}} where {L, S}} where {T, U}}","page":"API Reference","title":"PlasmaFormularyZ.magnetic_pressure","text":"magnetic_pressure(B)\n\nCalculate the magnetic pressure.\n\n\n\n\n\n","category":"method"},{"location":"api/#PlasmaFormularyZ.thermal_pressure-Tuple{Union{Unitful.Level{L, S, Unitful.Quantity{T, 𝚯, U}} where {T, U, L, S}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋^2 𝐌 𝐓^-2, U}} where {T, U, L, S}, Unitful.Quantity{T, 𝚯} where T, Unitful.Quantity{T, 𝐋^2 𝐌 𝐓^-2} where T}, Union{Unitful.Quantity{T, 𝐋^-3, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋^-3, U}} where {L, S}} where {T, U}}","page":"API Reference","title":"PlasmaFormularyZ.thermal_pressure","text":"thermal_pressure(T, n)\n\nCalculate the thermal pressure for a Maxwellian distribution.\n\nArguments\n\nT: The particle temperature or energy.\nn: The particle number density.\n\n\n\n\n\n","category":"method"},{"location":"api/#PlasmaFormularyZ.Alfven_speed-Tuple{Union{Unitful.Level{L, S, Unitful.Quantity{T, 𝐌 𝐈^-1 𝐓^-2, U}} where {T, U, L, S}, Unitful.Quantity{T, 𝐌 𝐈^-1 𝐓^-2} where T, AbstractVector{<:Union{Unitful.Quantity{T, 𝐌 𝐈^-1 𝐓^-2, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌 𝐈^-1 𝐓^-2, U}} where {L, S}} where {T, U}}}, Union{Unitful.Quantity{T, 𝐌 𝐋^-3, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌 𝐋^-3, U}} where {L, S}} where {T, U}}","page":"API Reference","title":"PlasmaFormularyZ.Alfven_speed","text":"Alfven_speed(B::BField, ρ)\nAlfven_speed(𝐁::Vector{BField}, ρ)\nAlfven_speed(B::BField, n::NumberDensity, mass_number = 1)\nAlfven_speed(𝐁::Vector{BField}, n::NumberDensity, mass_number = 1)\n\nAlfvén speed V_A, the typical propagation speed of magnetic disturbances in a quasineutral plasma.\n\nNote that this is different from the Alfven velocity, see also Alfven_velocity. References: PlasmaPy API Documentation\n\n\n\n\n\n","category":"method"},{"location":"api/#PlasmaFormularyZ.Alfven_velocity-Tuple{Union{Unitful.Level{L, S, Unitful.Quantity{T, 𝐌 𝐈^-1 𝐓^-2, U}} where {T, U, L, S}, Unitful.Quantity{T, 𝐌 𝐈^-1 𝐓^-2} where T, AbstractVector{<:Union{Unitful.Quantity{T, 𝐌 𝐈^-1 𝐓^-2, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌 𝐈^-1 𝐓^-2, U}} where {L, S}} where {T, U}}}, Union{Unitful.Quantity{T, 𝐌 𝐋^-3, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌 𝐋^-3, U}} where {L, S}} where {T, U}}","page":"API Reference","title":"PlasmaFormularyZ.Alfven_velocity","text":"Alfven_velocity(B::BField, ρ)\nAlfven_velocity(𝐁::Vector{BField}, ρ)\n\nCalculate the Alfven velocity for magnetic field vector. See also Alfven_speed.\n\n\n\n\n\n","category":"method"},{"location":"api/#PlasmaFormularyZ.thermal_velocity_coefficients-Tuple{PlasmaFormularyZ.MostProbable, Val{1}}","page":"API Reference","title":"PlasmaFormularyZ.thermal_velocity_coefficients","text":"thermal_velocity_coefficients(method::ThermalVelocityMethod, ndim::Int)\n\nGet the thermal speed coefficient corresponding to the desired thermal speed definition.\n\nArguments\n\nmethod::ThermalVelocityMethod: Method to be used for calculating the thermal speed. Valid values are MostProbable(), RMS(), MeanMagnitude(), and NRL().\nndim::Val{Int}: Dimensionality (1D, 2D, 3D) of space in which to calculate thermal speed. Valid values are Val(1), Val(2), or Val{3}.\n\n\n\n\n\n","category":"method"},{"location":"#PlasmaFormularyZ","page":"Home","title":"PlasmaFormularyZ","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia package for plasma physics formulas. This package implements a subset of the formulas found in the NRL Plasma Formulary, as well as some additional formulas taken from the PlasmaPy project.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For functions that take a ParticleLike as an argument, we use ChargedParticles.jl package to handle particle properties. One could provide a symbolic particle name or string or a Particle object for the argument. In addition, mass number and charge number can be specified as keyword arguments for these functions.\nFor function whose arguments are Unitful quantities with unique dimensions, arguments are order independent (see PermuteArgs.jl).","category":"page"},{"location":"#Quick-Example","page":"Home","title":"Quick Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using PlasmaFormularyZ, Unitful\n\nPlasmaFormularyZ.debye_length(1e18u\"cm^-3\", 10u\"eV\")\n\ngyrofrequency(0.01u\"T\", :e) # electron gyrofrequency\n\nplasma_frequency(1e19u\"m^-3\", \"proton\") # proton plasma frequency","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url=\"https://github.com/Beforerr/PlasmaFormularyZ.jl\")","category":"page"},{"location":"#Related-packages","page":"Home","title":"Related packages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PlasmaPy : plasmapy.formulary subpackage provides theoretical formulas for calculation of physical quantities helpful for plasma physics.\nFusionFormulary.jl","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
